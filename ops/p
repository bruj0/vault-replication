#!/bin/bash -e
####
# OPERATIONS
###

# To enable debug: export DEBUG=true
# Enable debug if the env variable DEBUG is set to true
if [[ "$DEBUG" == "true" ]];then
    set -x
fi
if [ "$0" == "ops/p" ]; then
    export VAULT_CLUSTER="primary"
    export VAULT_ADDR=http://127.0.0.1:9301
    export VAULT_BASE_ADDR=http://127.0.0.1:930
    export VAULT_UNSEALER_ADDR=http://127.0.0.1:9300
    
else
    export VAULT_CLUSTER="secondary"
    export VAULT_ADDR=http://127.0.0.1:9501
    export VAULT_BASE_ADDR=http://127.0.0.1:950
    export VAULT_UNSEALER_ADDR=http://127.0.0.1:9500    
fi
YAPI_PATH="ops/api/vault"
bold=$(tput bold)
normal=$(tput sgr0)
STORAGE=${STORAGE:-"raft"}
#Internal variables
export VAULT_DATA="ops/${STORAGE}/${VAULT_CLUSTER}"
export VAULT_TOKEN=$(cat $VAULT_DATA/init.json | jq -r '.root_token')
export VAULT_PREFIX=""
case "$1" in
"help")
        echo "Using storage: ${bold}${STORAGE}${normal}"
        echo "${bold}Usage: $0 <vault node> <vault command>| <operation command>${normal}"
        echo "Raft:"
        echo "  ${bold}init_unsealer${normal}"
        echo "  ${bold}unseal_unsealer${normal}"
        echo "  ${bold}config_unsealer${normal}"
        echo "  ${bold}init_recovery${normal}"
        echo "  ${bold}<vault node> raft_config${normal}"

        echo "Consul:"
        echo "  ${bold}init${normal}"
        echo "  ${bold}unseal${normal}"

        echo "Replication":
        echo "    ${bold}enable_perf${normal}"
        echo "    ${bold}disable_secondary${normal}"
        echo "    ${bold}activate_perf${normal}(only on secondary)" 

        echo "General:"
        echo "  ${bold}wipe${normal}"
        echo "  ${bold}vars${normal}: show Vault env vars"
        echo "  ${bold}vars_unsealer${normal}: show Vault env vars for the unsealer"
        echo "  ${bold}yapi${normal}: runs yapi with correct variables"
        echo "  ${bold}logs <node number>${normal}"
        echo "  ${bold}generate_root_recovery${normal}"

        

;;
"wipe")
    rm $VAULT_DATA/*
;;
"logs")
        docker logs ${VAULT_CLUSTER}_vault0$2_1  -f 2>&1 |grep -v checkpoint
;;
"config_unsealer")
        set +e
        export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
        export VAULT_TOKEN=$(cat $VAULT_DATA/unsealer_init.json | jq -r '.root_token')        
        echo "Enabling transit secret"
        yapi ${YAPI_PATH}/08-enable_transit.yaml
        yapi ${YAPI_PATH}/09-setup_transit.yaml
;;
"enable_perf")
        set +e
        export SECONDARY_HAPROXY_ADDR=$(docker network inspect vault_secondaryA | jq -r '.[] .Containers | with_entries(select(.value.Name=="raft_proxy"))| .[] .IPv4Address' | awk -F "/" '{print $1}')
        echo "Enabling replication in ${VAULT_CLUSTER}"
        yapi ${YAPI_PATH}/03-replication_enable_primary.yaml 

        echo "Creating secondary JWT token id=secondary"
        yapi ${YAPI_PATH}/04-replication_secondary_token.yaml 

       #echo "Enabling secondary replication to primary"
       # VAULT_TOKEN_SEC=$(cat secondary/${VAULT_DATA}/init.json | jq -r '.root_token')
       # VAULT_ADDR=http://127.0.0.1:9301 VAULT_TOKEN=${VAULT_TOKEN_SEC} \
       # yapi yapi/vault/05-replication_activate_secondary.yaml         
;;
"disable_secondary")
    vault write -f sys/replication/performance/primary/revoke-secondary id=secondary
;;
"activate_perf")
        if [ "$0" == "ops/p" ]; then
            echo "Must be activated in secondary"
            exit 0
        fi
        echo "Enabling secondary replication to primary"
        export VAULT_DATA_PRIMARY="ops/${STORAGE}/primary"
        export SECONDARY_HAPROXY_ADDR=$(docker network inspect vault_secondaryA | jq -r '.[] .Containers | with_entries(select(.value.Name=="raft_proxy"))| .[] .IPv4Address' | awk -F "/" '{print $1}')
        yapi ${YAPI_PATH}/05-replication_activate_secondary.yaml 
;;
"generate_root_recovery")
        echo "Creating a root token for secondary with the new unseal keys"
        export VAULT_DATA_PRIMARY="ops/${STORAGE}/primary"        
        yapi ${YAPI_PATH}/11-replication_generate_root_recovery.yaml
;;
    "yapi")
        yapi ${@}
;;
    "vars_unsealer")
        export VAULT_TOKEN=$(cat $VAULT_DATA/unsealer_init.json | jq -r '.root_token')
        echo "Exporting variables for Unsealer Vault"
        echo "export VAULT_ADDR=\"${VAULT_UNSEALER_ADDR}\""
        echo "export VAULT_TOKEN=\"${VAULT_TOKEN}\""
;;

    "vars")
        echo "Exporting variables for ${VAULT_CLUSTER} Vault"
        echo "export VAULT_ADDR=\"${VAULT_ADDR}\""
        echo "export VAULT_TOKEN=\"${VAULT_TOKEN}\""
;;
    "init_unsealer")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/unsealer_init.json" ]; then
            export VAULT_PREFIX="unsealer_"
            export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
            echo "Initializing Vault cluster ${CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/01-init.yaml 
        fi
;;
    "init_recovery")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/init.json" ]; then
            echo "Initializing Vault cluster ${CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/10-init_recovery.yaml 
        fi    
;;
    "init")
        # Initializaing and Unsealing
        if [ ! -f "$VAULT_DATA/init.json" ]; then
            echo "Initializing Vault cluster ${CLUSTER} at ${VAULT_ADDR}, files stored in ${VAULT_DATA}"
            yapi ${YAPI_PATH}/01-init.yaml 
        fi    
;;
    "unseal")
        echo "Unsealing Vault"
        yapi ${YAPI_PATH}/02-unseal.yaml
;;
    "unseal_unsealer")
        export VAULT_PREFIX="unsealer_"
        export VAULT_ADDR=${VAULT_UNSEALER_ADDR}
        echo "Unsealing Vault Unsealer"
        yapi ${YAPI_PATH}/02-unseal.yaml
;;
    *)
        set +x
        export VAULT_ADDR=${VAULT_BASE_ADDR}$1
        case "$2" in
            "raft_config")
                    vault read -format=json sys/storage/raft/configuration | jq
                    exit 1
            ;;
        esac
        #echo "VAULT_ADDR=${VAULT_ADDR}"
        vault ${@:2}
;;    
esac
